(function(){"use strict";const a=async(a,b,c,{continuable:d})=>{Symbol.asyncIterator in a||(a=async function*(a){for(const b of a)yield b}(a));let e;for await(const[f,g]of a)if(void 0!==c||e?c=await b(c,g,f,a):(c=g,e=!0),void 0===c&&!d)break;return c},b=async(b,c,d,e=!0)=>b&&"object"==typeof b?((Array.isArray(b)||!(Symbol.Iterator in b||Symbol.asyncIterator in b))&&(b=Object.entries(b)),a(b,c,d,{continuable:e})):c(d,b),c=async(a,b,c,{skipUndefined:f,tree:g})=>{const h=a;Symbol.asyncIterator in a||(a=async function*(){for(const a of h)yield a}(a));for await(const[i,j]of a){await b(j,i,h);(g&&newvalue&&"object"==typeof newvalue&&(newvalue=await d(newvalue,b,f)),!(void 0===newvalue&&f))&&(c instanceof Set?await c.add(newvalue):c instanceof Map||e(c,{del:!0,get:!0,set:!0})?await c.set(i,newvalue):e(c,{getItem:!0,removeItem:!0,setItem:!0})?await c.setItem(i,newvalue):c[i]=newvalue)}return c},d=async(a,b,d)=>{if(!a||"object"!=typeof a)return b(a);let e;return(Array.isArray(a)||!(Symbol.Iterator in a||Symbol.asyncIterator in a))&&(a=Object.entries(a),e=!Array.isArray(a)),c(a,b,Array.isArray(a)?a:Object.createObject(Object.getPrototypeOf(a)),{skipUndefined:d,tree:e})},e=(a,b)=>Object.keys(b).every(b=>"function"==typeof a[b]);flow=(...a)=>async c=>await b(a,async(a,b)=>await b(a),c,!1),pipe=(...a)=>async c=>await b(a,async(a,b)=>await b(a),c),when=(a,b)=>async c=>(await a(c))?await b(c):c,parralel=(...a)=>async(...b)=>{const c=[];return a.forEach(a=>c.push(a(...b))),await Promise.all(c)},race=(...a)=>async(...b)=>{const c=[];for(const d of a)c.push(d(...b));return Promise.race(c)},results=(...a)=>async(...b)=>{const c=[],d=[];for(const e of a){const a=(async()=>e(...ags))();c.push(a.then(a=>d.push(a)))}return await Promise.all(c),d},route=(a,c)=>async d=>((await a(d))&&(await b(c,async(b,c)=>await c(b),d,!1)),d),every=async(a,b)=>{Symbol.asyncIterator in a||(a=async function*(){for(const a of data)yield a}(a));for await(const c of a)if(!(await b(c)))return!1;return!0},some=async(a,b)=>{Symbol.asyncIterator in a||(a=async function*(){for(const a of data)yield a}(a));for await(const c of a)if(await b(c))return!0;return!1},forEach=async(a,b)=>{Symbol.asyncIterator in a||(a=async function*(){for(const a of data)yield a}(a));for await(const c of a)await b(c);return!0},assentials={every,exposes:e,flow,forEach,map:d,parralel,pipe,race,reduce:b,results,route,some},typeof module!==void 0&&(module.exports=assentials),typeof window!==void 0&&(module.exports=assentials)}).call(this);